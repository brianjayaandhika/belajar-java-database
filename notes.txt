Java - Database
1. JDBC (Java Database Connectivity) adalah sebuah API yang memungkinkan aplikasi Java untuk berinteraksi
dengan database, termasuk menjalankan query dan mengelola data.

2. Agar JDBC dapat berkomunikasi dengan database, diperlukan driver yang sesuai dengan jenis database
yang digunakan. Contohnya, MySQL menggunakan MySQL JDBC Driver (mysql-connector-java).

Contoh lain:
MySQL → mysql-connector-java
PostgreSQL → postgresql
SQL Server → mssql-jdbc

3. Untuk membuat koneksi ke database, kita dapat menggunakan metode statis dari DriverManager, yaitu:

Connection connection = DriverManager.getConnection(url, username, password);

Namun, cara ini tidak direkomendasikan dalam aplikasi skala besar karena jumlah koneksi ke database
memiliki batasan tertentu. Sebagai contoh, MySQL secara default membatasi 151 koneksi yang dapat
dibuka secara bersamaan dan apabila koneksi melewati batas tersebut, maka aplikasi dapat mengalami error.
Oleh karena itu, Connection Pooling lebih disarankan.

4. Connection Pooling adalah teknik untuk mengelola koneksi database dengan cara membuat
sekumpulan koneksi yang dapat dipinjam dan dikembalikan oleh pengguna.

Misalnya, jika terdapat 150 koneksi dalam pool, pengguna akan "meminjam" koneksi dari pool saat mengakses database.
Setelah selesai digunakan, koneksi akan dikembalikan ke pool agar dapat digunakan kembali oleh pengguna lain.
Jika semua koneksi dalam pool sedang digunakan, permintaan baru akan dimasukkan ke dalam antrean hingga ada
yang tersedia kembali.

Implementasi Connection Pooling dapat dibantu dengan library HikariCP

5. Penggunaan HikariCP membutuhkan beberapa konfigurasi
    a. setMaximumPoolSize   -> untuk menentukan jumlah pool
    b. setMinimumIdle       -> kalau tiba2 CP gak ada yg pake, itu kan buagn2 resource, maka akan diclose
        koneksinya, tapi tetap akan menyisakan minimum koneksinya, disisakan agar apabila tiba2 trafficnya naik,
        CP sudah siap untuk handle.
    c. setIdleTimeout       -> berapa lama hingga di close koneksinya apabila tidak ada yg menggunakan
    d. setMaxLifetime       -> apabila ada connection yang terlalu lama (melebihi batas maxlifetime), itu nanti
        otomatis dibuka kembali (ditutup dan dibuka lagi)

6. Saat kita sudah ter-connect ke database via Connection, kita pasti ingin mengirim perintah SQL ke database,
Connection adalah object jembatan koneksi dari aplikasi ke database via JDBC. Untuk mengirim SQL kita bisa
menggunakan beberapa object, salah satunya adalah Statement.

Statement adalah interface yang bisa digunakan untuk mengirim SQL ke database, sekaligus menerima respon.
Jangan lupa untuk menutup Statement dengan .close()

7. Beberapa method yang dapat digunakan:
    a. Statement.executeUpdate(String sqlQuery)
        -> Digunakan untuk mengirimkan perintah SQL insert, update, delete atau apapun yang tidak membutuhkan result
        -> Bahkan juga bisa digunakan untuk execute SQL DDL, walaupun tidak sesuai dengan best practice.
        -> Mengembalikan int, yang berupa berapa banyak data yang terkena impact perintah SQL
    b. Statement.executeQuery(String query)
        -> Untuk perintah SQL yang mengembalikan data
        -> Return berupa object java.sql.ResultSet, berisikan data-data query SQL

8. ResultSet adalah hasil dari Statement.executeQuery, yang merupakan representasi data hasil query.
    -> Mirip seperti iterator, sehingga bisa dilakukan perulangan untuk mendapatkan data tiap recordnya
    -> Cara kerja ResultSet itu seperti cursor, dimana kita bisa maju atau mundur dari posisi tertentu
        -> Maju dengan next() dan mundur dengan previous()
    -> Untuk mendapatkan data tiap kolom, pada saat di posisi cursor, kita dapat menggunakan sangat banyak method
        getXxx(column) di ResultSet, tergantung tipe data columnnya

9. SQL Injection adalah sebuah teknik yang menyalahgunakan sebuah celah keamanan yang terjadi dalam
lapisan basis data sebuah aplikasi, contoh SQL Injection apabila kita menggunakan statement

String username = "admin; #";
String password = "12345"; // password yang salah

String sql = "SELECT * FROM admin where username= '" + username
    + "' and password = '" + password
    + "'";

sql tersebut, apabila di baca dengan data yang sudah dimauskkan menjadi,

SELECT * FROM admin where username = 'admin'; # and password .....
-> Query berhenti di 'admin'; karena titik koma, dan # berarti query selanjutnya di comment.

Maka untuk query yang kita butuhkan data dinamis, kita gunakan PreparedStatement.

10. PreparedStatement, berbeda dengan Statement, yaitu ketika pembuatannya sudah ditentukan SQL apa yang kita
gunakan.
    -> Input dari user perlu diubah menjadi "?", sehingga nanti ketika pembuatan object, kita bisa substitusi
    datanya menggunakan setXxx(index, value) sesuai dengan tipe datanya

11. Batch Process
    -> Secara default, komunikasi antara aplikasi dengan database adalah request & response, dan terkadang
    apabila request yang dikirimkan terlalu banyak, maka akan memperlambat prosesnya.
    -> Batch process itu adalah proses mengirim perintah secara banyak sekaligus. Yang diutamakan dalam batch
    process adalah kecepatan.
        -> Contoh, import data file excel ke database
    -> Batch Process di JDBC
        -> JDBC mendukung proses eksekusi perintah SQL secara batch di Statement maupun PreparedStatement
        -> di Statement, bisa menggunakan addBatch(sql) untuk menambah perintah ke proses batch. Lebih dynamic,
        SQLnya bisa custom
        -> di PreparedStatement, juga menggunakan addBatch(sql), lalu juga bisa menggunakan clearParameters()
        untuk menghapus parameter input user sebelumnya
        -> Setelah proses batch selesai, untuk eksekusinya bisa menggunakan executeBatch()
            -> Hanya untuk mengirim data ke database, bukan menerima.
    -> PERLU DICATAT !!!
        -> Proses batch akan disimpan di memory sebelum dikirim ke database, oleh karena itu bijak lah dalam
        membuat batch, misal per 100 atau per 1000 apabila memang datanya sangat banyak.

12. Auto Increment
    -> Kadang, setelah melakukan INSERT ke database yang memiliki primary key dengan auto increment, kita ingin
    mendapatkan data ID terbarunya, sebenarnya bisa dilakukan di MYSQL dengan query SELECT LAST_INSERT_ID(),
    namun itu berarti kita perlu menambahkan Statement baru untuk query tersebut.
    -> Di JDBC, ada kemampuan utk auto generate data seperti auto increment dgn method getGenerateKeys() yang
    mengembalikan ResultSet, yang kemudian kita tinggal lakukan iterasi pada ResultSet tersebut.
    -> Secara default, Statement atau PreparedStatement tidak memiliki kemampuan untuk mengambil auto generated
    keys, kita perlu menambahkan ke param ketika kita memanggil prepareStatement() atau createStatement()
        -> preparedStatement(sql, Statement.RETURN_GENERATED_KEYS)
        -> Statement(sql, Statement.RETURN_GENERATED_KEYS)

13. Date, Time, and Timestamp
    -> Hati2 saat menggunakan Date, gunakan java.sql bukan java.util

14. Database Transaction
    -> Database Transaction adalah serangkaian operasi database yang dianggap sebagai satu kesatuan proses.
    Jika satu operasi gagal, maka   semua operasi lainnya dalam transaksi tersebut harus dibatalkan agar database
    tetap dalam keadaan konsisten.
    -> Auto Commit
        -> Secara default, Connection di JDBC memiliki sifat auto-commit (artinya tiap query akan langsung dijalankan)
        -> Dalam database transaction, kita perlu mematikan auto-commit, yaitu dengan menggunakan method di
        Connection yaitu setAutoCommit(false), setelah proses transaction selesai, kita bisa menggunakan
        commit() milik Connection
        -> Atau kalau ingin meng-gagalkan transaction, gunakan rollback()

15. Metadata
    -> Metadata adalah informasi terkait database yang digunakan. Ada beberapa jenis, diantaranya
        -> DatabaseMetaData, seluruh informasi terkait database yang digunakan (Connection.getMetaData())
            - Nama database, Versi database, Table2 di database, dll
        -> ParameterMetaData, infomrasi seputar parameter yg terdapat di preparedStatement
            - Jumlah parameter, type parameter
        -> ResultSetMetaData, infomrasi seputar hasil ResultSet
            - jumlah kolom, nama kolom, tipe data tiap kolom, dll

16. Repository Pattern
    -> Biasanya digunakan sebagai jembatan antara business logic aplikasi kita dengan semua perintah SQL ke
    database.
    -> Semua perintah SQL kita ditulis di dalam repository, business logicnya cukup memanggil repository saja
    -> Berikut adalah Diagram Repository Pattern
        ->
    Business Logic --(call)--> Repository (interface) --(use)--> Entity/Model (representasi tabel di database)
                                         |
                                    (implement)
                                         |
                                         v
                               Repository Implementation --(call)--> Database
    -> Repository VS DAO (Data Access Object)
        -> Konsepnya hampir sama, namun Repository tidak menganggap bahwa storage itu hanya database, sedangkan
        di DAO biasanya storagenya itu adalah database.
        -> Kedua ini tujuannya sama, untuk meng-enkapsulasi cara mengakses data
    -> Entity / Model
        -> Dalam OOP, sebuah tabel di database biasanya akan selalu dibuat representasinya sebagai class Entity
        atau Model, untuk mempermudah membuat kode program.
            -> Biasanya tiap2 table akan dibuat classnya sendiri
        -> Misal kita query ke repository, dibanding mengembalikan ResultSet, akan lebih baik di konversikan dulu
        di Repositorynya ke class Entity / Model, sehingga kita tinggal gunakan objectnya saja

17. CallableStatement & Store Procedure
    -> Fitur JDBC untuk memanggil STORE DATABASE di database. Tidak dibahas pada course ini.
    -> Apabila databasenya masih menggunakan STORE DATABASE, maka WAJIB menggunakan CallableStatement